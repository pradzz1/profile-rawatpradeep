{"version":3,"sources":["components/home.js","components/aboutMe.js","components/contact.js","components/totalExperience.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["home","aboutMe","contact","totalExperience","footer","Header","Layout","Footer","Content","App","to","exact","className","activeClassName","path","children","Home","experience","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAKeA,G,MAHF,WACb,OAAQ,sCCIOC,EALC,WACd,OAAO,sCCIMC,EALC,WACd,OAAO,wCCIMC,EALS,WACpB,OAAO,2CCEIC,EAHA,WACX,OAAO,sCCaHC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QA2CTC,MAxCf,WACE,OAEE,kBAAC,IAAD,KACE,6BACA,kBAAC,IAAD,KACA,kBAACJ,EAAD,KACA,kBAAC,IAAD,CAASK,GAAG,IAAIC,OAAK,EAACC,UAAU,OAAOC,gBAAgB,UAAvD,QAGE,kBAAC,IAAD,CAASH,GAAG,WAAWE,UAAU,OAAOC,gBAAgB,UAAxD,YAGA,kBAAC,IAAD,CAASH,GAAG,cAAcE,UAAU,OAAOC,gBAAgB,UAA3D,cAGA,kBAAC,IAAD,CAASH,GAAG,WAAWE,UAAU,OAAOC,gBAAgB,UAAxD,YAIF,kBAACL,EAAD,KAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOM,KAAK,IAAIH,OAAK,EAACI,SAAUC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWH,OAAK,EAACI,SAAUd,IACvC,kBAAC,IAAD,CAAOa,KAAK,cAAcC,SAAUE,IACpC,kBAAC,IAAD,CAAOH,KAAK,WAAWC,SAAUb,MAIzC,kBAACK,EAAD,KAASH,OCrCSc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KAAQ,kBAAC,EAAD,QAEVC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a941fbfb.chunk.js","sourcesContent":["import React from 'react';\n\nconst home = () =>{\nreturn (<h1>home</h1>);\n}\nexport default home;","import React from 'react';\n\nconst aboutMe = () =>{\n  return(<h1>About</h1>);\n}\n\n\nexport default aboutMe;","import React from 'react';\n\nconst contact = () =>{\n  return(<h1>Contact</h1>);\n}\n\n\nexport default contact;","import React from 'react';\n\nconst totalExperience = () =>{\n    return(<h1>Experience</h1>);\n}\n\n\nexport default totalExperience;","import React from 'react';\n\nconst footer = () =>{\n    return(<h1>hello</h1>);\n}\nexport default footer;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport { Layout } from 'antd';\nimport \"./App.css\";\nimport Home from \"./components/home\"\nimport aboutMe from \"./components/aboutMe\";\nimport contact from \"./components/contact\";\nimport experience from \"./components/totalExperience\";\nimport footer from \"./components/footer\"\n\nconst { Header, Footer, Content } = Layout;\n\n\nfunction App() {\n  return (\n    \n    <Router>\n      <div>\n      <Layout>\n      <Header>\n      <NavLink to=\"/\" exact className=\"link\" activeClassName=\"active\">\n          Home\n        </NavLink>\n        <NavLink to=\"/aboutMe\" className=\"link\" activeClassName=\"active\">\n          About Me\n        </NavLink>\n        <NavLink to=\"/experience\" className=\"link\" activeClassName=\"active\">\n          Experience\n        </NavLink>\n        <NavLink to=\"/contact\" className=\"link\" activeClassName=\"active\">\n          Contact\n        </NavLink>\n      </Header>\n      <Content>\n   \n      <Switch>\n          <Route path=\"/\" exact children={Home} />\n          <Route path=\"/aboutMe\" exact children={aboutMe} />\n          <Route path=\"/experience\" children={experience} />\n          <Route path=\"/contact\" children={contact} />\n        </Switch>\n      </Content>\n      \n  <Footer>{footer}</Footer>\n    </Layout>\n       \n\n       \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nReactDOM.render(\n  <React.StrictMode>\n    <Router><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}